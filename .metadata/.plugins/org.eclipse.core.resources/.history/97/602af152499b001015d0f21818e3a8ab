package com.barbearia.barbearia.infraestrutura.security;

import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.io.IOException;
import io.jsonwebtoken.lang.Arrays;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.Cookie;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JwtAuthFilter extends OncePerRequestFilter {

    private final JwtService jwtService;
    private final ClienteRepository clienteRepository;
    private final BarbeariaRepository barbeariaRepository;

    public JwtAuthFilter(JwtService jwtService,
                         ClienteRepository clienteRepository,
                         BarbeariaRepository barbeariaRepository) {
        this.jwtService = jwtService;
        this.clienteRepository = clienteRepository;
        this.barbeariaRepository = barbeariaRepository;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        // ðŸ”¹ Pega os cookies da requisiÃ§Ã£o
        Cookie[] cookies = request.getCookies();
        if (cookies != null) {
            Optional<Cookie> jwtCookie = Arrays.stream(cookies)
                    .filter(c -> "jwt".equals(c.getName())) // nome do cookie
                    .findFirst();

            if (jwtCookie.isPresent()) {
                String jwt = jwtCookie.get().getValue();

                if (jwtService.isTokenValid(jwt)) {
                    String email = jwtService.extractUsername(jwt);
                    String tipo = jwtService.extractTipo(jwt);
                    Set<String> roles = jwtService.extractRoles(jwt);

                    Object usuario = null;

                    if ("CLIENTE".equals(tipo)) {
                        usuario = clienteRepository.findByEmail(email).orElse(null);
                    } else if ("BARBEARIA".equals(tipo)) {
                        usuario = barbeariaRepository.findByEmail(email).orElse(null);
                    }

                    if (usuario != null) {
                        List<SimpleGrantedAuthority> authorities = roles.stream()
                                .map(role -> new SimpleGrantedAuthority("ROLE_" + role))
                                .toList();

                        UsernamePasswordAuthenticationToken authToken =
                                new UsernamePasswordAuthenticationToken(usuario, null, authorities);

                        SecurityContextHolder.getContext().setAuthentication(authToken);
                    }
                }
            }
        }

        filterChain.doFilter(request, response);
    }
}
