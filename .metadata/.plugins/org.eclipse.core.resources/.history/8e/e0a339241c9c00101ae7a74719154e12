package com.barbearia.barbearia.domain.cliente;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

import com.barbearia.barbearia.application.cliente.dto.ClienteGetDTO;
import com.barbearia.barbearia.application.cliente.dto.ClienteMapper;
import com.barbearia.barbearia.application.cliente.dto.ClientePostDTO;
import com.barbearia.barbearia.domain.Tipo;
import com.barbearia.barbearia.domain.cliente.exceptions.ClienteJaCadastrado;
import com.barbearia.barbearia.infraestrutura.repository.ClienteRepositoryJpa;

@Service
public class ClienteService {
	
	@Autowired
	private ClienteRepositoryJpa clienteRepositoryJpa;
	@Autowired
	private PasswordEncoder passwordEncoder;

	public ClienteService(ClienteRepositoryJpa clienteRepositoryJpa){
		this.clienteRepositoryJpa = clienteRepositoryJpa;
	}
	
	public ClienteGetDTO cadastrarCliente(ClientePostDTO clientePost) throws Exception {
		Optional<Cliente> clienteEncontrado = clienteRepositoryJpa.findByEmail(ClienteMapper.toEntity(clientePost).getEmail());
		if(clienteEncontrado.isPresent()) {
			Cliente cliente = ClienteMapper.toEntity(clientePost);
			throw new ClienteJaCadastrado(cliente.getEmail());
		}

		Cliente cliente = ClienteMapper.toEntity(clientePost);
		cliente.setPassword(passwordEncoder.encode(cliente.getPassword()));
		cliente.setTipo(Tipo.CLIENTE);
		clienteRepositoryJpa.save(cliente);
		return ClienteMapper.toDTO(cliente);
	}
}
