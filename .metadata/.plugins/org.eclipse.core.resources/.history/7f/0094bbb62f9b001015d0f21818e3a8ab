package com.barbearia.barbearia.infraestrutura.security;

import java.util.List;
import java.util.Set;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import com.barbearia.barbearia.infraestrutura.repository.BarbeariaRepositoryJpa;
import com.barbearia.barbearia.infraestrutura.repository.ClienteRepositoryJpa;

import io.jsonwebtoken.io.IOException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JwtAuthFilter extends OncePerRequestFilter {

    private final JwtService jwtService;
    private final ClienteRepositoryJpa clienteRepository;
    private final BarbeariaRepositoryJpa barbeariaRepository;

    public JwtAuthFilter(JwtService jwtService,
                         ClienteRepositoryJpa clienteRepository,
                         BarbeariaRepositoryJpa barbeariaRepository) {
        this.jwtService = jwtService;
        this.clienteRepository = clienteRepository;
        this.barbeariaRepository = barbeariaRepository;
    }

    @Override
    protected void doFilterInternal(HttpServletRequest request,
                                    HttpServletResponse response,
                                    FilterChain filterChain) throws ServletException, IOException {

        String authHeader = request.getHeader("Authorization");

        if (authHeader != null && authHeader.startsWith("Bearer ")) {
            String jwt = authHeader.substring(7);

            if (jwtService.isTokenValid(jwt)) {
                String username = jwtService.extractUsername(jwt);
                String tipo = jwtService.extractTipo(jwt);
                Set<String> roles = jwtService.extractRoles(jwt);

                Object usuario = null;

                if ("CLIENTE".equals(tipo)) {
                    usuario = clienteRepository.findByEmail(username).orElse(null);
                } else if ("BARBEARIA".equals(tipo)) {
                    usuario = barbeariaRepository.findByEmail(username).orElse(null);
                }

                if (usuario != null) {
                    List<SimpleGrantedAuthority> authorities = roles.stream()
                            .map(role -> new SimpleGrantedAuthority("ROLE_" + role))
                            .toList();

                    UsernamePasswordAuthenticationToken authToken =
                            new UsernamePasswordAuthenticationToken(usuario, null, authorities);

                    SecurityContextHolder.getContext().setAuthentication(authToken);
                }
            }
        }

        filterChain.doFilter(request, response);
    }
}
